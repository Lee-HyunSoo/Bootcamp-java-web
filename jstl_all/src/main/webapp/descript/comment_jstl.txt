1. JSTL에 대하여
jstl.jar / standard.jar 두 파일이 필요

2. JSTL 사용목적
JSP로 작업할 경우, HTML 내부 코드에 대한 가독성이 떨어지고 웹 디자이너 & 퍼블리셔가 작업 시, 실수로 JSP관련 코드를 수정 또는 삭제하는 경우를 방지하기 위해.
JSP / EL / Action Tag 등과 달리 JSTL은 별도의 라이브러리가 필요하고 반드시 선언이 필요하다.

3. JSTL 라이브러리 설치 방법
WEB-INF -> lib 폴더에 해당 라이브러리 파일을 넣어주면 된다.

4. JSTL이 제공하는 5가지 라이브러리
1) Core : 출력, 제어문, 반복문에 대한 tag 형태 
2) Format : 출력 형식에 관련된 tag 형태 제공
3) Function : JSTL이 제공하는 함수들을 tag 형태로 제공
4) XML : XML 문서를 읽거나 내보내기 위한 tag를 제공
5) SQL : SQL 쿼리문을 작성할 수 있는 tag를 제공 : Mybatis에서 주로 사용

5. JSTL 라이브러리 사용 방법
1) <%@ taglib를 이용하여 사용할 라이브러리 선언
<% taglib uri = "라이브러리가 제공하는 태그를 해석할 수 있는 참조 URL" prefix="태그구분" %>

ex) Core 라이브러리를 사용할 경우
<%@ taglib uri="http://java.sum.com/jsp/jstl/core" prefix="core" %>
<core:out></core:out>

<%@ taglib uri="http://java.sum.com/jsp/jstl/core" prefix="c" %>
<c:out></c:out>

2) 출력
- <c:out value="출력값"></c:out>
- <c:out value="출력값" default="기본값"></c:out>
- <c:out value="출력값" default="기본값" escapeXml="true / false"></c:out> : 출력, 기본값 내부에 HTML 태그가 존재하는 경우

3) 변수 선언
- <c:set var="변수명"></c:set>
- <c:set var="변수명" value="초기값"></c:set>
- <c:set var="변수명" value="초기값" scope="변수선언위치"></c:set>

4) 변수 제거
- <c:remove var="제거할 변수명" scope="변수선언위치"></c:remove>

5) 예외 처리
- <c:catch var="변수명"></c:catch>

6) if문
- <c:if test="조건" var="조건처리 변수명" scope="범위"></c:if>

7) 제어문(switch)
- <c:choose>
	<c:when test="조건"> 처리내용 </c:when>
 </c:choose>
 
8) 조건문(if ~ else)
- <c:choose>
	<c:when test="조건"> 처리내용 </c:when>
	<c:oterwise> 처리내용 </c:otherwise>
 </c:choose>
  
9) 반복문(for)
- <c:foreach var="변수명" items="객체" begin="시작인덱스" end="끝인덱스" step="건너뛸 값"> </c:foreach>
- begin~step 까지는 생략가능하다. 생략되면 0~객체끝 까지 하나씩 가져온다.

10) 파라미터 전달
- <c:param name="파라미터 명" value="전달값"></c:param>

11) 페이지 이동 (sendRedirect)
- <c:redirect url="이동할 주소"></c:redirect> 